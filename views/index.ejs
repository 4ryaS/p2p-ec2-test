<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>Image Generator</title>
    <style>
        body {
            font-family: sans-serif;
            padding: 2rem;
            background: #f8f9fa;
        }

        .container {
            max-width: 600px;
            margin: auto;
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
        }

        label {
            display: block;
            font-weight: bold;
            margin-top: 1rem;
        }

        textarea,
        select,
        input[type="number"] {
            width: 100%;
            margin-bottom: 1rem;
            padding: 0.5rem;
        }

        #output {
            width: 100%;
            margin: 1rem 0;
            display: block;
            max-height: 400px;
            object-fit: contain;
        }

        #loading {
            text-align: center;
            color: #666;
            font-weight: bold;
            margin-bottom: 1rem;
        }

        #log {
            font-family: monospace;
            background: #eee;
            padding: 1rem;
            border-radius: 5px;
            height: 100px;
            overflow-y: auto;
        }
    </style>
</head>

<body>
    <div class="container">
        <h2>Image Generator</h2>

        <label for="prompt">Prompt</label>
        <textarea id="prompt" placeholder="Type a prompt..."></textarea>

        <label for="model">Model</label>
        <select id="model">
            <option value="fal-ai/flux-1/dev">Flux Dev (Stream)</option>
            <option value="fal-ai/flux/schnell">Flux Schnell</option>
        </select>

        <label for="style">Style</label>
        <select id="style">
            <option value="none">None</option>
            <option value="cartoon">Cartoon</option>
            <option value="pastel">Pastel</option>
            <option value="sketch">Sketch</option>
            <option value="realism">Realism</option>
            <option value="scifi">Sci-Fi</option>
        </select>

        <div id="loading" style="display:none;">⏳ Generating your image...</div>
        <img id="output" src="" alt="Generated image here">
        <div id="log"></div>
    </div>

    <script>
        const API_BASE = "<%= apiBaseUrl %>";

        const promptInput = document.getElementById("prompt");
        const modelInput = document.getElementById("model");
        const styleInput = document.getElementById("style");
        const output = document.getElementById("output");
        const log = document.getElementById("log");
        const loading = document.getElementById("loading");

        const modelsWithSSE = ["fal-ai/flux-1/dev"];
        let debounce;
        let lastKeyTime = Date.now();
        let debounceDelay = 500;
        let lastPrompt = "";
        let currentEventSource;
        let controller;
        let isModelOrStyleChanged = false; // Flag to track model or style changes

        // Handle prompt input with debounce
        promptInput.addEventListener("input", () => {
            const now = Date.now();
            const diff = now - lastKeyTime;
            lastKeyTime = now;

            debounceDelay = diff < 100 ? 800 : 400;

            clearTimeout(debounce);
            debounce = setTimeout(generateImage, debounceDelay);
        });

        // Event listener for model and style change
        [modelInput, styleInput].forEach(el =>
            el.addEventListener("change", () => {
                // Mark that model or style has changed
                isModelOrStyleChanged = true;
                generateImage(); // Trigger image generation immediately
            })
        );

        function appendLog(msg) {
            const div = document.createElement("div");
            div.textContent = msg;
            log.appendChild(div);
            log.scrollTop = log.scrollHeight;
        }

        function generateImage() {
            const prompt = promptInput.value.trim();
            const model = modelInput.value;
            const style = styleInput.value;
            const useSSE = modelsWithSSE.includes(model);

            // ✅ Validation: allow short/unchanged prompt if model/style changed
            if (prompt.length < 5 && !isModelOrStyleChanged) {
                appendLog("⚠️ Prompt too short.");
                return;
            }

            if (prompt === lastPrompt && !isModelOrStyleChanged) {
                appendLog("ℹ️ Prompt unchanged, skipping generation.");
                return;
            }

            // ✅ Reset override flag AFTER validation
            if (isModelOrStyleChanged) {
                isModelOrStyleChanged = false;
                if (!prompt) {
                    appendLog("⚠️ No prompt entered, using default prompt.");
                }
            }

            lastPrompt = prompt;
            log.innerText = "";
            output.src = "";
            loading.style.display = "block";

            if (currentEventSource) {
                currentEventSource.close();
                currentEventSource = null;
            }

            if (controller) {
                controller.abort();
                controller = null;
            }

            if (useSSE) {
                const url = `${API_BASE}/stream?prompt=${encodeURIComponent(prompt)}&model=${model}&orientation=square&outputFormat=png&style=${style}&sessionId=5acd4e1f48d8428fa1615b953c4efb652bcb01ff76509d6f13b6ec5fafdfb43e`;

                const es = new EventSource(url);
                currentEventSource = es;

                es.addEventListener("image", (e) => {
                    try {
                        const data = JSON.parse(e.data);
                        const imageUrl = data.url || data.base64Image;
                        if (imageUrl) {
                            output.src = imageUrl;
                            appendLog("✅ Image received");
                        } else {
                            appendLog("⚠️ No image data in event");
                        }
                    } catch (err) {
                        appendLog("❌ Error parsing image event: " + err.message);
                    }
                    loading.style.display = "none";
                });

                es.addEventListener("error", (e) => {
                    appendLog("❌ SSE Error (see console)");
                    console.error("SSE error event", e);
                    es.close();
                    loading.style.display = "none";
                });

                es.addEventListener("done", () => {
                    appendLog("✅ Stream done");
                    es.close();
                    loading.style.display = "none";
                });

            } else {
                controller = new AbortController();
                fetch(`${API_BASE}/generate-image`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    signal: controller.signal,
                    body: JSON.stringify({
                        style: style,
                        model: model,
                        orientation: "square",
                        prompt: prompt,
                        outputFormat: "png",
                        sessionId: "5acd4e1f48d8428fa1615b953c4efb652bcb01ff76509d6f13b6ec5fafdfb43e"
                    })
                })
                    .then(res => res.json())
                    .then(data => {
                        if (data.imageUrl) {
                            output.src = data.imageUrl;
                            appendLog("✅ Image generated");
                        } else {
                            appendLog("❌ Failed to generate image");
                        }
                        loading.style.display = "none";
                    })
                    .catch(err => {
                        if (err.name === "AbortError") {
                            appendLog("⏹️ Previous request aborted");
                        } else {
                            appendLog("❌ Error: " + err.message);
                        }
                        loading.style.display = "none";
                    });
            }
        }

    </script>

</body>

</html>